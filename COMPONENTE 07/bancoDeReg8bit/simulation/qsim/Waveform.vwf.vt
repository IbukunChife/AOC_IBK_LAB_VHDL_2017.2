// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2017 15:36:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          breg8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module breg8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [7:0] Dado;
reg EscritaReg;
reg [1:0] RegA;
reg [1:0] RegB;
// wires                                               
wire [7:0] SaidaA;
wire [7:0] SaidaB;

// assign statements (if any)                          
breg8 i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Dado(Dado),
	.EscritaReg(EscritaReg),
	.RegA(RegA),
	.RegB(RegB),
	.SaidaA(SaidaA),
	.SaidaB(SaidaB)
);
initial 
begin 
#16000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #1000 1'b1;
	#1000;
end 

// EscritaReg
always
begin
	EscritaReg = 1'b0;
	EscritaReg = #2000 1'b1;
	#2000;
end 
// RegA[ 1 ]
initial
begin
	RegA[1] = 1'b0;
	RegA[1] = #6000 1'b1;
	RegA[1] = #6000 1'b0;
end 
// RegA[ 0 ]
initial
begin
	repeat(2)
	begin
		RegA[0] = 1'b0;
		RegA[0] = #3000 1'b1;
		# 3000;
	end
	RegA[0] = 1'b0;
	RegA[0] = #3000 1'b1;
end 
// RegB[ 1 ]
initial
begin
	RegB[1] = 1'b1;
	RegB[1] = #3000 1'b0;
	RegB[1] = #6000 1'b1;
	RegB[1] = #6000 1'b0;
end 
// RegB[ 0 ]
initial
begin
	repeat(2)
	begin
		RegB[0] = 1'b1;
		RegB[0] = #3000 1'b0;
		# 3000;
	end
	RegB[0] = 1'b1;
	RegB[0] = #3000 1'b0;
end 
// Dado[ 7 ]
initial
begin
	Dado[7] = 1'b0;
end 
// Dado[ 6 ]
initial
begin
	Dado[6] = 1'b0;
end 
// Dado[ 5 ]
initial
begin
	Dado[5] = 1'b0;
end 
// Dado[ 4 ]
initial
begin
	Dado[4] = 1'b0;
end 
// Dado[ 3 ]
initial
begin
	Dado[3] = 1'b0;
end 
// Dado[ 2 ]
initial
begin
	Dado[2] = 1'b0;
	Dado[2] = #12000 1'b1;
end 
// Dado[ 1 ]
initial
begin
	Dado[1] = 1'b0;
	Dado[1] = #6000 1'b1;
	Dado[1] = #6000 1'b0;
end 
// Dado[ 0 ]
initial
begin
	repeat(2)
	begin
		Dado[0] = 1'b0;
		Dado[0] = #3000 1'b1;
		# 3000;
	end
	Dado[0] = 1'b0;
	Dado[0] = #3000 1'b1;
end 
endmodule

