// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2017 21:02:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uniControle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uniControle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [3:0] opcode;
reg treg_pc_flag;
// wires                                               
wire esc_men;
wire esc_reg;
wire ler_men;
wire memParaReg;
wire pc_flag;
wire ula_fonte;
wire [2:0] ULAop;

// assign statements (if any)                          
assign pc_flag = treg_pc_flag;
uniControle i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.esc_men(esc_men),
	.esc_reg(esc_reg),
	.ler_men(ler_men),
	.memParaReg(memParaReg),
	.opcode(opcode),
	.pc_flag(pc_flag),
	.ula_fonte(ula_fonte),
	.ULAop(ULAop)
);
initial 
begin 
#16000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #500000 1'b1;
	#500000;
end 

// pc_flag
initial
begin
	treg_pc_flag = 1'b1;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b0;
end 
// opcode[ 2 ]
always
begin
	opcode[2] = 1'b0;
	opcode[2] = #8000000 1'b1;
	#8000000;
end 
// opcode[ 1 ]
always
begin
	opcode[1] = 1'b0;
	opcode[1] = #4000000 1'b1;
	#4000000;
end 
// opcode[ 0 ]
always
begin
	opcode[0] = 1'b0;
	opcode[0] = #2000000 1'b1;
	#2000000;
end 
endmodule

