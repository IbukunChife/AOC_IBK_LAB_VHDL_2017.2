// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2017 18:58:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
reg [1:0] S;
// wires                                               
wire R;

// assign statements (if any)                          
mux i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.R(R),
	.S(S)
);
initial 
begin 
#16000000 $finish;
end 

// A
always
begin
	A = 1'b0;
	A = #500000 1'b1;
	#500000;
end 

// B
initial
begin
	B = 1'b1;
	B = #500000 1'b0;
	# 500000;
	repeat(14)
	begin
		B = 1'b1;
		B = #500000 1'b0;
		# 500000;
	end
	B = 1'b1;
	B = #500000 1'b0;
end 

// C
always
begin
	C = 1'b0;
	C = #1000000 1'b1;
	#1000000;
end 

// D
initial
begin
	repeat(5)
	begin
		D = 1'b0;
		D = #1500000 1'b1;
		# 1500000;
	end
	D = 1'b0;
end 
// S[ 1 ]
always
begin
	S[1] = 1'b0;
	S[1] = #500000 1'b1;
	#500000;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b1;
	S[0] = #1500000 1'b0;
	# 1500000;
	repeat(4)
	begin
		S[0] = 1'b1;
		S[0] = #1500000 1'b0;
		# 1500000;
	end
	S[0] = 1'b1;
end 
endmodule

